#MYSQL
spring.datasource.url=jdbc:mysql://localhost:3306/tmoviesdb?createDatabaseIfNotExist=true
#spring.datasource.url=jdbc:mysql://localhost:13309/tmoviesdb?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=false
spring.datasource.username=root
spring.datasource.password=123456

server.port= 8080
#JPA + Hibernate
spring.jpa.properties.hibernate.globally_quoted_identifiers=true
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.generate-ddl=true
#update exist db, create new scheme and destroy previous data, nomarlly use update
spring.jpa.hibernate.ddl-auto=update

logging.level.org.hibernate = ERROR


#spring.jackson.property-naming-strategy=SNAKE_CASE

#OpenAPI 3.0 config - Swagger 3
#springdoc.swagger-ui.path=/swagger-ui-custom.html
#springdoc.swagger-ui.operationsSorter=method

# Cloudinary config
com.cloudinary.cloud_name=do69uspr8
com.cloudinary.api_key=757667574534588
com.cloudinary.api_secret=EbR1C_MKt8uo0ojZK-20plECI7w

##thymeleaf
#spring.thymeleaf.cache=false
logging.level.org.hibernate.SQL= DEBUG
logging.level.org.hibernate.type=TRACE
#

#paypal
paypal.mode=sandbox
paypal.client.id=AVrY-E1piwWoNhYdZkvo_fXhRUPm0o-X9wqvx2uaH_-jJMHzvGJV28upXmjUQ6bvVsuPJIeADfIZAPkC
paypal.client.secret=EM-w5Wz23Jsha36qscuid_tayK60p8v8-B6JdKiywiTpt8RtDn6DnbK_VIfmiStrrecv53fH0P8rVwgI

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=tmovie.email@gmail.com
spring.mail.password=kecaumttutuvoucz
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

#BaseURL
app.apiURL = https://t-movies-api.herokuapp.com/api/v1/
app.authUrl = https://t-movies-api.herokuapp.com/api/auth/
app.rootURL = https://t-movies-api.herokuapp.com/
app.frontend.url = http://localhost:3000/

# Redis
#spring.cache.type=redis
#spring.redis.host=localhost
#spring.redis.port=6379

## SPRING SECURITY
# App Properties
app.jwtSecret= secretKey
app.jwtExpirationMs= 86400000

## MULTIPART (MultipartProperties)
# Enable multipart uploads
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2KB
# Max file size.
spring.servlet.multipart.max-file-size=50MB
# Max Request Size
spring.servlet.multipart.max-request-size=50MB


## File Storage Properties
# All files uploaded through the REST API will be stored in this directory
#file.upload-dir=/src/main/resources/images